// ahb_master_slave_with_qsys_bfm_mm_interconnect_3.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 200 at 2015.08.10.14:24:39

`timescale 1 ps / 1 ps
module ahb_master_slave_with_qsys_bfm_mm_interconnect_3 (
		input  wire        clk_0_clk_clk,                                               //                                             clk_0_clk.clk
		input  wire        ahb2avalon_burst_bridge_0_reset_reset_bridge_in_reset_reset, // ahb2avalon_burst_bridge_0_reset_reset_bridge_in_reset.reset
		input  wire [31:0] ahb2avalon_burst_bridge_0_avalon_master_address,             //               ahb2avalon_burst_bridge_0_avalon_master.address
		output wire        ahb2avalon_burst_bridge_0_avalon_master_waitrequest,         //                                                      .waitrequest
		input  wire [3:0]  ahb2avalon_burst_bridge_0_avalon_master_burstcount,          //                                                      .burstcount
		input  wire [3:0]  ahb2avalon_burst_bridge_0_avalon_master_byteenable,          //                                                      .byteenable
		input  wire        ahb2avalon_burst_bridge_0_avalon_master_read,                //                                                      .read
		output wire [31:0] ahb2avalon_burst_bridge_0_avalon_master_readdata,            //                                                      .readdata
		output wire        ahb2avalon_burst_bridge_0_avalon_master_readdatavalid,       //                                                      .readdatavalid
		input  wire        ahb2avalon_burst_bridge_0_avalon_master_write,               //                                                      .write
		input  wire [31:0] ahb2avalon_burst_bridge_0_avalon_master_writedata,           //                                                      .writedata
		output wire [4:0]  mm_slave_bfm_0_s0_address,                                   //                                     mm_slave_bfm_0_s0.address
		output wire        mm_slave_bfm_0_s0_write,                                     //                                                      .write
		output wire        mm_slave_bfm_0_s0_read,                                      //                                                      .read
		input  wire [31:0] mm_slave_bfm_0_s0_readdata,                                  //                                                      .readdata
		output wire [31:0] mm_slave_bfm_0_s0_writedata,                                 //                                                      .writedata
		output wire [3:0]  mm_slave_bfm_0_s0_byteenable,                                //                                                      .byteenable
		input  wire        mm_slave_bfm_0_s0_readdatavalid,                             //                                                      .readdatavalid
		input  wire        mm_slave_bfm_0_s0_waitrequest                                //                                                      .waitrequest
	);

	wire          ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_waitrequest;   // ahb2avalon_burst_bridge_0_avalon_master_agent:av_waitrequest -> ahb2avalon_burst_bridge_0_avalon_master_translator:uav_waitrequest
	wire    [5:0] ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_burstcount;    // ahb2avalon_burst_bridge_0_avalon_master_translator:uav_burstcount -> ahb2avalon_burst_bridge_0_avalon_master_agent:av_burstcount
	wire   [31:0] ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_writedata;     // ahb2avalon_burst_bridge_0_avalon_master_translator:uav_writedata -> ahb2avalon_burst_bridge_0_avalon_master_agent:av_writedata
	wire   [31:0] ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_address;       // ahb2avalon_burst_bridge_0_avalon_master_translator:uav_address -> ahb2avalon_burst_bridge_0_avalon_master_agent:av_address
	wire          ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_lock;          // ahb2avalon_burst_bridge_0_avalon_master_translator:uav_lock -> ahb2avalon_burst_bridge_0_avalon_master_agent:av_lock
	wire          ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_write;         // ahb2avalon_burst_bridge_0_avalon_master_translator:uav_write -> ahb2avalon_burst_bridge_0_avalon_master_agent:av_write
	wire          ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_read;          // ahb2avalon_burst_bridge_0_avalon_master_translator:uav_read -> ahb2avalon_burst_bridge_0_avalon_master_agent:av_read
	wire   [31:0] ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_readdata;      // ahb2avalon_burst_bridge_0_avalon_master_agent:av_readdata -> ahb2avalon_burst_bridge_0_avalon_master_translator:uav_readdata
	wire          ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_debugaccess;   // ahb2avalon_burst_bridge_0_avalon_master_translator:uav_debugaccess -> ahb2avalon_burst_bridge_0_avalon_master_agent:av_debugaccess
	wire    [3:0] ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_byteenable;    // ahb2avalon_burst_bridge_0_avalon_master_translator:uav_byteenable -> ahb2avalon_burst_bridge_0_avalon_master_agent:av_byteenable
	wire          ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_readdatavalid; // ahb2avalon_burst_bridge_0_avalon_master_agent:av_readdatavalid -> ahb2avalon_burst_bridge_0_avalon_master_translator:uav_readdatavalid
	wire          rsp_mux_src_endofpacket;                                                                    // rsp_mux:src_endofpacket -> ahb2avalon_burst_bridge_0_avalon_master_agent:rp_endofpacket
	wire          rsp_mux_src_valid;                                                                          // rsp_mux:src_valid -> ahb2avalon_burst_bridge_0_avalon_master_agent:rp_valid
	wire          rsp_mux_src_startofpacket;                                                                  // rsp_mux:src_startofpacket -> ahb2avalon_burst_bridge_0_avalon_master_agent:rp_startofpacket
	wire  [104:0] rsp_mux_src_data;                                                                           // rsp_mux:src_data -> ahb2avalon_burst_bridge_0_avalon_master_agent:rp_data
	wire    [0:0] rsp_mux_src_channel;                                                                        // rsp_mux:src_channel -> ahb2avalon_burst_bridge_0_avalon_master_agent:rp_channel
	wire          rsp_mux_src_ready;                                                                          // ahb2avalon_burst_bridge_0_avalon_master_agent:rp_ready -> rsp_mux:src_ready
	wire          mm_slave_bfm_0_s0_agent_m0_waitrequest;                                                     // mm_slave_bfm_0_s0_translator:uav_waitrequest -> mm_slave_bfm_0_s0_agent:m0_waitrequest
	wire    [2:0] mm_slave_bfm_0_s0_agent_m0_burstcount;                                                      // mm_slave_bfm_0_s0_agent:m0_burstcount -> mm_slave_bfm_0_s0_translator:uav_burstcount
	wire   [31:0] mm_slave_bfm_0_s0_agent_m0_writedata;                                                       // mm_slave_bfm_0_s0_agent:m0_writedata -> mm_slave_bfm_0_s0_translator:uav_writedata
	wire   [31:0] mm_slave_bfm_0_s0_agent_m0_address;                                                         // mm_slave_bfm_0_s0_agent:m0_address -> mm_slave_bfm_0_s0_translator:uav_address
	wire          mm_slave_bfm_0_s0_agent_m0_write;                                                           // mm_slave_bfm_0_s0_agent:m0_write -> mm_slave_bfm_0_s0_translator:uav_write
	wire          mm_slave_bfm_0_s0_agent_m0_lock;                                                            // mm_slave_bfm_0_s0_agent:m0_lock -> mm_slave_bfm_0_s0_translator:uav_lock
	wire          mm_slave_bfm_0_s0_agent_m0_read;                                                            // mm_slave_bfm_0_s0_agent:m0_read -> mm_slave_bfm_0_s0_translator:uav_read
	wire   [31:0] mm_slave_bfm_0_s0_agent_m0_readdata;                                                        // mm_slave_bfm_0_s0_translator:uav_readdata -> mm_slave_bfm_0_s0_agent:m0_readdata
	wire          mm_slave_bfm_0_s0_agent_m0_readdatavalid;                                                   // mm_slave_bfm_0_s0_translator:uav_readdatavalid -> mm_slave_bfm_0_s0_agent:m0_readdatavalid
	wire          mm_slave_bfm_0_s0_agent_m0_debugaccess;                                                     // mm_slave_bfm_0_s0_agent:m0_debugaccess -> mm_slave_bfm_0_s0_translator:uav_debugaccess
	wire    [3:0] mm_slave_bfm_0_s0_agent_m0_byteenable;                                                      // mm_slave_bfm_0_s0_agent:m0_byteenable -> mm_slave_bfm_0_s0_translator:uav_byteenable
	wire          mm_slave_bfm_0_s0_agent_rf_source_endofpacket;                                              // mm_slave_bfm_0_s0_agent:rf_source_endofpacket -> mm_slave_bfm_0_s0_agent_rsp_fifo:in_endofpacket
	wire          mm_slave_bfm_0_s0_agent_rf_source_valid;                                                    // mm_slave_bfm_0_s0_agent:rf_source_valid -> mm_slave_bfm_0_s0_agent_rsp_fifo:in_valid
	wire          mm_slave_bfm_0_s0_agent_rf_source_startofpacket;                                            // mm_slave_bfm_0_s0_agent:rf_source_startofpacket -> mm_slave_bfm_0_s0_agent_rsp_fifo:in_startofpacket
	wire  [105:0] mm_slave_bfm_0_s0_agent_rf_source_data;                                                     // mm_slave_bfm_0_s0_agent:rf_source_data -> mm_slave_bfm_0_s0_agent_rsp_fifo:in_data
	wire          mm_slave_bfm_0_s0_agent_rf_source_ready;                                                    // mm_slave_bfm_0_s0_agent_rsp_fifo:in_ready -> mm_slave_bfm_0_s0_agent:rf_source_ready
	wire          mm_slave_bfm_0_s0_agent_rsp_fifo_out_endofpacket;                                           // mm_slave_bfm_0_s0_agent_rsp_fifo:out_endofpacket -> mm_slave_bfm_0_s0_agent:rf_sink_endofpacket
	wire          mm_slave_bfm_0_s0_agent_rsp_fifo_out_valid;                                                 // mm_slave_bfm_0_s0_agent_rsp_fifo:out_valid -> mm_slave_bfm_0_s0_agent:rf_sink_valid
	wire          mm_slave_bfm_0_s0_agent_rsp_fifo_out_startofpacket;                                         // mm_slave_bfm_0_s0_agent_rsp_fifo:out_startofpacket -> mm_slave_bfm_0_s0_agent:rf_sink_startofpacket
	wire  [105:0] mm_slave_bfm_0_s0_agent_rsp_fifo_out_data;                                                  // mm_slave_bfm_0_s0_agent_rsp_fifo:out_data -> mm_slave_bfm_0_s0_agent:rf_sink_data
	wire          mm_slave_bfm_0_s0_agent_rsp_fifo_out_ready;                                                 // mm_slave_bfm_0_s0_agent:rf_sink_ready -> mm_slave_bfm_0_s0_agent_rsp_fifo:out_ready
	wire          mm_slave_bfm_0_s0_agent_rdata_fifo_src_valid;                                               // mm_slave_bfm_0_s0_agent:rdata_fifo_src_valid -> mm_slave_bfm_0_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_slave_bfm_0_s0_agent_rdata_fifo_src_data;                                                // mm_slave_bfm_0_s0_agent:rdata_fifo_src_data -> mm_slave_bfm_0_s0_agent:rdata_fifo_sink_data
	wire          mm_slave_bfm_0_s0_agent_rdata_fifo_src_ready;                                               // mm_slave_bfm_0_s0_agent:rdata_fifo_sink_ready -> mm_slave_bfm_0_s0_agent:rdata_fifo_src_ready
	wire          ahb2avalon_burst_bridge_0_avalon_master_agent_cp_endofpacket;                               // ahb2avalon_burst_bridge_0_avalon_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          ahb2avalon_burst_bridge_0_avalon_master_agent_cp_valid;                                     // ahb2avalon_burst_bridge_0_avalon_master_agent:cp_valid -> router:sink_valid
	wire          ahb2avalon_burst_bridge_0_avalon_master_agent_cp_startofpacket;                             // ahb2avalon_burst_bridge_0_avalon_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire  [104:0] ahb2avalon_burst_bridge_0_avalon_master_agent_cp_data;                                      // ahb2avalon_burst_bridge_0_avalon_master_agent:cp_data -> router:sink_data
	wire          ahb2avalon_burst_bridge_0_avalon_master_agent_cp_ready;                                     // router:sink_ready -> ahb2avalon_burst_bridge_0_avalon_master_agent:cp_ready
	wire          router_src_endofpacket;                                                                     // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          router_src_valid;                                                                           // router:src_valid -> cmd_demux:sink_valid
	wire          router_src_startofpacket;                                                                   // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire  [104:0] router_src_data;                                                                            // router:src_data -> cmd_demux:sink_data
	wire    [0:0] router_src_channel;                                                                         // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_ready;                                                                           // cmd_demux:sink_ready -> router:src_ready
	wire          mm_slave_bfm_0_s0_agent_rp_endofpacket;                                                     // mm_slave_bfm_0_s0_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          mm_slave_bfm_0_s0_agent_rp_valid;                                                           // mm_slave_bfm_0_s0_agent:rp_valid -> router_001:sink_valid
	wire          mm_slave_bfm_0_s0_agent_rp_startofpacket;                                                   // mm_slave_bfm_0_s0_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire  [104:0] mm_slave_bfm_0_s0_agent_rp_data;                                                            // mm_slave_bfm_0_s0_agent:rp_data -> router_001:sink_data
	wire          mm_slave_bfm_0_s0_agent_rp_ready;                                                           // router_001:sink_ready -> mm_slave_bfm_0_s0_agent:rp_ready
	wire          router_001_src_endofpacket;                                                                 // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_001_src_valid;                                                                       // router_001:src_valid -> rsp_demux:sink_valid
	wire          router_001_src_startofpacket;                                                               // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire  [104:0] router_001_src_data;                                                                        // router_001:src_data -> rsp_demux:sink_data
	wire    [0:0] router_001_src_channel;                                                                     // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_ready;                                                                       // rsp_demux:sink_ready -> router_001:src_ready
	wire          cmd_mux_src_endofpacket;                                                                    // cmd_mux:src_endofpacket -> mm_slave_bfm_0_s0_burst_adapter:sink0_endofpacket
	wire          cmd_mux_src_valid;                                                                          // cmd_mux:src_valid -> mm_slave_bfm_0_s0_burst_adapter:sink0_valid
	wire          cmd_mux_src_startofpacket;                                                                  // cmd_mux:src_startofpacket -> mm_slave_bfm_0_s0_burst_adapter:sink0_startofpacket
	wire  [104:0] cmd_mux_src_data;                                                                           // cmd_mux:src_data -> mm_slave_bfm_0_s0_burst_adapter:sink0_data
	wire    [0:0] cmd_mux_src_channel;                                                                        // cmd_mux:src_channel -> mm_slave_bfm_0_s0_burst_adapter:sink0_channel
	wire          cmd_mux_src_ready;                                                                          // mm_slave_bfm_0_s0_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire          mm_slave_bfm_0_s0_burst_adapter_source0_endofpacket;                                        // mm_slave_bfm_0_s0_burst_adapter:source0_endofpacket -> mm_slave_bfm_0_s0_agent:cp_endofpacket
	wire          mm_slave_bfm_0_s0_burst_adapter_source0_valid;                                              // mm_slave_bfm_0_s0_burst_adapter:source0_valid -> mm_slave_bfm_0_s0_agent:cp_valid
	wire          mm_slave_bfm_0_s0_burst_adapter_source0_startofpacket;                                      // mm_slave_bfm_0_s0_burst_adapter:source0_startofpacket -> mm_slave_bfm_0_s0_agent:cp_startofpacket
	wire  [104:0] mm_slave_bfm_0_s0_burst_adapter_source0_data;                                               // mm_slave_bfm_0_s0_burst_adapter:source0_data -> mm_slave_bfm_0_s0_agent:cp_data
	wire          mm_slave_bfm_0_s0_burst_adapter_source0_ready;                                              // mm_slave_bfm_0_s0_agent:cp_ready -> mm_slave_bfm_0_s0_burst_adapter:source0_ready
	wire    [0:0] mm_slave_bfm_0_s0_burst_adapter_source0_channel;                                            // mm_slave_bfm_0_s0_burst_adapter:source0_channel -> mm_slave_bfm_0_s0_agent:cp_channel
	wire          cmd_demux_src0_endofpacket;                                                                 // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                                                       // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire          cmd_demux_src0_startofpacket;                                                               // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire  [104:0] cmd_demux_src0_data;                                                                        // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire    [0:0] cmd_demux_src0_channel;                                                                     // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_ready;                                                                       // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire          rsp_demux_src0_endofpacket;                                                                 // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                                       // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire          rsp_demux_src0_startofpacket;                                                               // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire  [104:0] rsp_demux_src0_data;                                                                        // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire    [0:0] rsp_demux_src0_channel;                                                                     // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_ready;                                                                       // rsp_mux:sink0_ready -> rsp_demux:src0_ready

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (4),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) ahb2avalon_burst_bridge_0_avalon_master_translator (
		.clk                      (clk_0_clk_clk),                                                                              //                       clk.clk
		.reset                    (ahb2avalon_burst_bridge_0_reset_reset_bridge_in_reset_reset),                                //                     reset.reset
		.uav_address              (ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (ahb2avalon_burst_bridge_0_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (ahb2avalon_burst_bridge_0_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (ahb2avalon_burst_bridge_0_avalon_master_burstcount),                                         //                          .burstcount
		.av_byteenable            (ahb2avalon_burst_bridge_0_avalon_master_byteenable),                                         //                          .byteenable
		.av_read                  (ahb2avalon_burst_bridge_0_avalon_master_read),                                               //                          .read
		.av_readdata              (ahb2avalon_burst_bridge_0_avalon_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (ahb2avalon_burst_bridge_0_avalon_master_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (ahb2avalon_burst_bridge_0_avalon_master_write),                                              //                          .write
		.av_writedata             (ahb2avalon_burst_bridge_0_avalon_master_writedata),                                          //                          .writedata
		.av_beginbursttransfer    (1'b0),                                                                                       //               (terminated)
		.av_begintransfer         (1'b0),                                                                                       //               (terminated)
		.av_chipselect            (1'b0),                                                                                       //               (terminated)
		.av_lock                  (1'b0),                                                                                       //               (terminated)
		.av_debugaccess           (1'b0),                                                                                       //               (terminated)
		.uav_clken                (),                                                                                           //               (terminated)
		.av_clken                 (1'b1),                                                                                       //               (terminated)
		.uav_response             (2'b00),                                                                                      //               (terminated)
		.av_response              (),                                                                                           //               (terminated)
		.uav_writeresponserequest (),                                                                                           //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                                       //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                                       //               (terminated)
		.av_writeresponsevalid    ()                                                                                            //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mm_slave_bfm_0_s0_translator (
		.clk                      (clk_0_clk_clk),                                               //                      clk.clk
		.reset                    (ahb2avalon_burst_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (mm_slave_bfm_0_s0_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount           (mm_slave_bfm_0_s0_agent_m0_burstcount),                       //                         .burstcount
		.uav_read                 (mm_slave_bfm_0_s0_agent_m0_read),                             //                         .read
		.uav_write                (mm_slave_bfm_0_s0_agent_m0_write),                            //                         .write
		.uav_waitrequest          (mm_slave_bfm_0_s0_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid        (mm_slave_bfm_0_s0_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable           (mm_slave_bfm_0_s0_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata             (mm_slave_bfm_0_s0_agent_m0_readdata),                         //                         .readdata
		.uav_writedata            (mm_slave_bfm_0_s0_agent_m0_writedata),                        //                         .writedata
		.uav_lock                 (mm_slave_bfm_0_s0_agent_m0_lock),                             //                         .lock
		.uav_debugaccess          (mm_slave_bfm_0_s0_agent_m0_debugaccess),                      //                         .debugaccess
		.av_address               (mm_slave_bfm_0_s0_address),                                   //      avalon_anti_slave_0.address
		.av_write                 (mm_slave_bfm_0_s0_write),                                     //                         .write
		.av_read                  (mm_slave_bfm_0_s0_read),                                      //                         .read
		.av_readdata              (mm_slave_bfm_0_s0_readdata),                                  //                         .readdata
		.av_writedata             (mm_slave_bfm_0_s0_writedata),                                 //                         .writedata
		.av_byteenable            (mm_slave_bfm_0_s0_byteenable),                                //                         .byteenable
		.av_readdatavalid         (mm_slave_bfm_0_s0_readdatavalid),                             //                         .readdatavalid
		.av_waitrequest           (mm_slave_bfm_0_s0_waitrequest),                               //                         .waitrequest
		.av_begintransfer         (),                                                            //              (terminated)
		.av_beginbursttransfer    (),                                                            //              (terminated)
		.av_burstcount            (),                                                            //              (terminated)
		.av_writebyteenable       (),                                                            //              (terminated)
		.av_lock                  (),                                                            //              (terminated)
		.av_chipselect            (),                                                            //              (terminated)
		.av_clken                 (),                                                            //              (terminated)
		.uav_clken                (1'b0),                                                        //              (terminated)
		.av_debugaccess           (),                                                            //              (terminated)
		.av_outputenable          (),                                                            //              (terminated)
		.uav_response             (),                                                            //              (terminated)
		.av_response              (2'b00),                                                       //              (terminated)
		.uav_writeresponserequest (1'b0),                                                        //              (terminated)
		.uav_writeresponsevalid   (),                                                            //              (terminated)
		.av_writeresponserequest  (),                                                            //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                         //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_BEGIN_BURST           (88),
		.PKT_BURSTWRAP_H           (80),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BURST_SIZE_H          (83),
		.PKT_BURST_SIZE_L          (81),
		.PKT_BURST_TYPE_H          (85),
		.PKT_BURST_TYPE_L          (84),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (91),
		.PKT_THREAD_ID_H           (92),
		.PKT_THREAD_ID_L           (92),
		.PKT_CACHE_H               (99),
		.PKT_CACHE_L               (96),
		.PKT_DATA_SIDEBAND_H       (87),
		.PKT_DATA_SIDEBAND_L       (87),
		.PKT_QOS_H                 (89),
		.PKT_QOS_L                 (89),
		.PKT_ADDR_SIDEBAND_H       (86),
		.PKT_ADDR_SIDEBAND_L       (86),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_ORI_BURST_SIZE_H      (104),
		.ST_DATA_W                 (105),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) ahb2avalon_burst_bridge_0_avalon_master_agent (
		.clk                     (clk_0_clk_clk),                                                                              //       clk.clk
		.reset                   (ahb2avalon_burst_bridge_0_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.av_address              (ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (ahb2avalon_burst_bridge_0_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (ahb2avalon_burst_bridge_0_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (ahb2avalon_burst_bridge_0_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (ahb2avalon_burst_bridge_0_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (ahb2avalon_burst_bridge_0_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (ahb2avalon_burst_bridge_0_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (rsp_mux_src_valid),                                                                          //        rp.valid
		.rp_data                 (rsp_mux_src_data),                                                                           //          .data
		.rp_channel              (rsp_mux_src_channel),                                                                        //          .channel
		.rp_startofpacket        (rsp_mux_src_startofpacket),                                                                  //          .startofpacket
		.rp_endofpacket          (rsp_mux_src_endofpacket),                                                                    //          .endofpacket
		.rp_ready                (rsp_mux_src_ready),                                                                          //          .ready
		.av_response             (),                                                                                           // (terminated)
		.av_writeresponserequest (1'b0),                                                                                       // (terminated)
		.av_writeresponsevalid   ()                                                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (88),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (80),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (95),
		.PKT_PROTECTION_L          (93),
		.PKT_RESPONSE_STATUS_H     (101),
		.PKT_RESPONSE_STATUS_L     (100),
		.PKT_BURST_SIZE_H          (83),
		.PKT_BURST_SIZE_L          (81),
		.PKT_ORI_BURST_SIZE_L      (102),
		.PKT_ORI_BURST_SIZE_H      (104),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (105),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_slave_bfm_0_s0_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (ahb2avalon_burst_bridge_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (mm_slave_bfm_0_s0_agent_m0_address),                          //              m0.address
		.m0_burstcount           (mm_slave_bfm_0_s0_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (mm_slave_bfm_0_s0_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (mm_slave_bfm_0_s0_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (mm_slave_bfm_0_s0_agent_m0_lock),                             //                .lock
		.m0_readdata             (mm_slave_bfm_0_s0_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (mm_slave_bfm_0_s0_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (mm_slave_bfm_0_s0_agent_m0_read),                             //                .read
		.m0_waitrequest          (mm_slave_bfm_0_s0_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (mm_slave_bfm_0_s0_agent_m0_writedata),                        //                .writedata
		.m0_write                (mm_slave_bfm_0_s0_agent_m0_write),                            //                .write
		.rp_endofpacket          (mm_slave_bfm_0_s0_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (mm_slave_bfm_0_s0_agent_rp_ready),                            //                .ready
		.rp_valid                (mm_slave_bfm_0_s0_agent_rp_valid),                            //                .valid
		.rp_data                 (mm_slave_bfm_0_s0_agent_rp_data),                             //                .data
		.rp_startofpacket        (mm_slave_bfm_0_s0_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (mm_slave_bfm_0_s0_burst_adapter_source0_ready),               //              cp.ready
		.cp_valid                (mm_slave_bfm_0_s0_burst_adapter_source0_valid),               //                .valid
		.cp_data                 (mm_slave_bfm_0_s0_burst_adapter_source0_data),                //                .data
		.cp_startofpacket        (mm_slave_bfm_0_s0_burst_adapter_source0_startofpacket),       //                .startofpacket
		.cp_endofpacket          (mm_slave_bfm_0_s0_burst_adapter_source0_endofpacket),         //                .endofpacket
		.cp_channel              (mm_slave_bfm_0_s0_burst_adapter_source0_channel),             //                .channel
		.rf_sink_ready           (mm_slave_bfm_0_s0_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (mm_slave_bfm_0_s0_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (mm_slave_bfm_0_s0_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (mm_slave_bfm_0_s0_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (mm_slave_bfm_0_s0_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (mm_slave_bfm_0_s0_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (mm_slave_bfm_0_s0_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (mm_slave_bfm_0_s0_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (mm_slave_bfm_0_s0_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (mm_slave_bfm_0_s0_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (mm_slave_bfm_0_s0_agent_rdata_fifo_src_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_slave_bfm_0_s0_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_sink_data    (mm_slave_bfm_0_s0_agent_rdata_fifo_src_data),                 //                .data
		.rdata_fifo_src_ready    (mm_slave_bfm_0_s0_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_slave_bfm_0_s0_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (mm_slave_bfm_0_s0_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponserequest (),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (106),
		.FIFO_DEPTH          (33),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_slave_bfm_0_s0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (ahb2avalon_burst_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mm_slave_bfm_0_s0_agent_rf_source_data),                      //        in.data
		.in_valid          (mm_slave_bfm_0_s0_agent_rf_source_valid),                     //          .valid
		.in_ready          (mm_slave_bfm_0_s0_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (mm_slave_bfm_0_s0_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (mm_slave_bfm_0_s0_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (mm_slave_bfm_0_s0_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (mm_slave_bfm_0_s0_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (mm_slave_bfm_0_s0_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (mm_slave_bfm_0_s0_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (mm_slave_bfm_0_s0_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	ahb_master_slave_with_qsys_bfm_mm_interconnect_3_router router (
		.sink_ready         (ahb2avalon_burst_bridge_0_avalon_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (ahb2avalon_burst_bridge_0_avalon_master_agent_cp_valid),         //          .valid
		.sink_data          (ahb2avalon_burst_bridge_0_avalon_master_agent_cp_data),          //          .data
		.sink_startofpacket (ahb2avalon_burst_bridge_0_avalon_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (ahb2avalon_burst_bridge_0_avalon_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                  //       clk.clk
		.reset              (ahb2avalon_burst_bridge_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_src_ready),                                               //       src.ready
		.src_valid          (router_src_valid),                                               //          .valid
		.src_data           (router_src_data),                                                //          .data
		.src_channel        (router_src_channel),                                             //          .channel
		.src_startofpacket  (router_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                          //          .endofpacket
	);

	ahb_master_slave_with_qsys_bfm_mm_interconnect_3_router_001 router_001 (
		.sink_ready         (mm_slave_bfm_0_s0_agent_rp_ready),                            //      sink.ready
		.sink_valid         (mm_slave_bfm_0_s0_agent_rp_valid),                            //          .valid
		.sink_data          (mm_slave_bfm_0_s0_agent_rp_data),                             //          .data
		.sink_startofpacket (mm_slave_bfm_0_s0_agent_rp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (mm_slave_bfm_0_s0_agent_rp_endofpacket),                      //          .endofpacket
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (ahb2avalon_burst_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                        //       src.ready
		.src_valid          (router_001_src_valid),                                        //          .valid
		.src_data           (router_001_src_data),                                         //          .data
		.src_channel        (router_001_src_channel),                                      //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                   //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (88),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (83),
		.PKT_BURST_SIZE_L          (81),
		.PKT_BURST_TYPE_H          (85),
		.PKT_BURST_TYPE_L          (84),
		.PKT_BURSTWRAP_H           (80),
		.PKT_BURSTWRAP_L           (80),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (105),
		.ST_CHANNEL_W              (1),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (80),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) mm_slave_bfm_0_s0_burst_adapter (
		.clk                   (clk_0_clk_clk),                                               //       cr0.clk
		.reset                 (ahb2avalon_burst_bridge_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                           //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                            //          .data
		.sink0_channel         (cmd_mux_src_channel),                                         //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                     //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                           //          .ready
		.source0_valid         (mm_slave_bfm_0_s0_burst_adapter_source0_valid),               //   source0.valid
		.source0_data          (mm_slave_bfm_0_s0_burst_adapter_source0_data),                //          .data
		.source0_channel       (mm_slave_bfm_0_s0_burst_adapter_source0_channel),             //          .channel
		.source0_startofpacket (mm_slave_bfm_0_s0_burst_adapter_source0_startofpacket),       //          .startofpacket
		.source0_endofpacket   (mm_slave_bfm_0_s0_burst_adapter_source0_endofpacket),         //          .endofpacket
		.source0_ready         (mm_slave_bfm_0_s0_burst_adapter_source0_ready)                //          .ready
	);

	ahb_master_slave_with_qsys_bfm_mm_interconnect_3_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (ahb2avalon_burst_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                            //      sink.ready
		.sink_channel       (router_src_channel),                                          //          .channel
		.sink_data          (router_src_data),                                             //          .data
		.sink_startofpacket (router_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_src_valid),                                            //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                        //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                        //          .valid
		.src0_data          (cmd_demux_src0_data),                                         //          .data
		.src0_channel       (cmd_demux_src0_channel),                                      //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                   //          .endofpacket
	);

	ahb_master_slave_with_qsys_bfm_mm_interconnect_3_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                               //       clk.clk
		.reset               (ahb2avalon_burst_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_src_valid),                                           //          .valid
		.src_data            (cmd_mux_src_data),                                            //          .data
		.src_channel         (cmd_mux_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                        //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                        //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                      //          .channel
		.sink0_data          (cmd_demux_src0_data),                                         //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                                   //          .endofpacket
	);

	ahb_master_slave_with_qsys_bfm_mm_interconnect_3_cmd_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (ahb2avalon_burst_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                        //      sink.ready
		.sink_channel       (router_001_src_channel),                                      //          .channel
		.sink_data          (router_001_src_data),                                         //          .data
		.sink_startofpacket (router_001_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (router_001_src_valid),                                        //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                   //          .endofpacket
	);

	ahb_master_slave_with_qsys_bfm_mm_interconnect_3_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                               //       clk.clk
		.reset               (ahb2avalon_burst_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                           //       src.ready
		.src_valid           (rsp_mux_src_valid),                                           //          .valid
		.src_data            (rsp_mux_src_data),                                            //          .data
		.src_channel         (rsp_mux_src_channel),                                         //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                        //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                        //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                      //          .channel
		.sink0_data          (rsp_demux_src0_data),                                         //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                                   //          .endofpacket
	);

endmodule
